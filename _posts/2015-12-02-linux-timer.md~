---
layout: post
title: c++ list
category: c++
---

讲述c++链表实现。

<!-- more -->

    typedef int T;

    class List{
        struct Node {
            T data;
            Node *next;
            /*T():0初始化，基本类型为数值的0,其余类型为创建对象不传参数（匿名对像）*/
            Node(const T& d=T()):data(d), next(NULL){}
            operator T(){return data;}
        };
        Node *head;
        unsigned int len;
    public:
        List():head(NULL){}
        ~List(){clear();}
        void travel()const
        {
            Node *p = head;
            while(p)
            {
                cout << *p << " ";
                p = p->next;
            }
            cout << endl;
        }
        void push_front(const T& d)
        {
            insert(d, 0);
        }
        List& push_back(const T& d){
            insert(d, size());
            return *this;
        }
        void clear()
        {
            while(size()) erase(0);
        }
        Node *& getptr(int pos)
        {
            if (pos < 0 || pos > size()) pos = 0;
            if (pos == 0) return head;
            Node *p = head;
            for (int i=1; i<pos; ++i)   p = p->next;
            return p->next;
        }
        int find(const T& d){
            int pos = 0;
            Node *p = head;
            while(p){
                if (p->data == d)
                    break;
                p = p->next;
                ++pos;
            }
            if(p) return pos;
            else return -1;
        }
        void insert(const T& d, int pos)
        {
            Node *&p = getptr(pos);
            Node *pn = new Node(d);

            pn->next = p;
            p = pn;
            ++len;
            }
            int size()const {
                return len;
        }
        void erase(int pos) {// 按位置删除
            if (0>pos||pos>=size()) return;
            Node *&pn = getptr(pos);
            Node *p = pn;
            pn = pn->next;
            --len;
            delete p;
        }
        void remove(const T& d){
            int pos;
            while((pos = find(d)) != -1){
                erase(pos);
            }
        }
        void set(int pos, const T& d){
            if (pos<0||pos>size()) return;
            Node *p = getptr(pos);
            p->data = d;
        }
        bool empty()const {return size() == 0;}

        const T& front() {if (empty())throw "空";return head->data;}

        const T& back() {
            if (empty()) throw "空";
            Node *p = head;
            while(p->next) p = p->next;
            return p->data;
        }
    };

**注：getptr函数返回指向指定结点的指针的引用，可以在insert时直接修改此值达到修 改前一结点的next成员的目的**
